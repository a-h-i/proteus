
FILE lib.hpp BEGIN
#include "lib/proteus.hpp"
#include <map>
#include <string>
#include <functional>
typedef std::function<void(std::string &)> callback_t;
class Recognizer {
	prot_t backend;
	std::map<std::string, std::string > word_id; // utterance -> id
	std::multimap<std::string, callback_t>  id_handler; // id -> callback
	callback_t errorFunc;
	public:
		Recognizer(const std::string & lmDir);
		std::string recognize_one();
		void register_callback(std::function<void(std::string &)> func, const std::string &id );
		void set_error_callback(callback_t f);
		~Recognizer();
};

FILE END

FILE lib.cpp BEGIN

const char * grammarFile = "THE_GRAMMAR";
const char * dictFile = "THE_DICT";

#include "lib.hpp"
Recognizer::Recognizer(const std::string & lmDir) {
	std::string gramPath(lmDir + "/" + grammarFile);
	std::string dictPath(lmDir + "/" + dictFile);
	backend = prot_init(gramPath.c_str(), dictPath.c_str());
	// populate it
	EXPAND_ME_BEGIN
	word_id[std::string("COMMAND_EX")] = std::string("ID_EX");
	EXPAND_ME_END
}
std::string Recognizer::recognize_one() {
	std::string hypStr;
	char * hyp = recog_word( backend );
	if(hyp != nullptr) {
		std::string hypStr = hyp;
		delete[] hyp;
		if (word_id.count(hyp) != 0) {
			auto id = word_id[hypStr];
			auto range = id_handler.equal_range(id);
			while(range.first != range.second) {
				(range.first->second)(id);
				++range.first;
			}
		}else {
			// unknown string
			if(errorFunc){
				errorFunc(hypStr);
			}
		}
		return hypStr;
	}else {
		if(errorFunc){
			errorFunc(hypStr);
		}
		return hypStr;
	}
}
void Recognizer::register_callback(callback_t func, const std::string &id ){
	id_handler.emplace(std::make_pair(id, func));
}

void Recognizer::set_error_callback(callback_t f) {
	errorFunc = f;
}
Recognizer::~Recognizer() {
	//prot_free( backend );
}
FILE END